//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
    provider="postgresql"
    url=env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

enum TravelMode {
    CAR
    TRAIN
    PLANE
    BOAT
    WALK
}

/// @@allow('create', true)
model User {
    /// @email
    email String @unique()
    /// @password
    /// @omit
    /// @length(6, 16)
    password String?
    googleRefreshToken String?
    /// @length(1, 32)
    name String
    /// @length(3, 15)
    /// @regex('^[a-zA-Z0-9_]+$')
    username String @unique()
    role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
    roleId String
    drafts FreeDateDraft[]
    plans PlannedDate[]
    profile UserProfile?
    datesRequested CustomDate[]
    tastemaker Tastemaker?
    customDateMessages CustomDateMessage[]
    stripeCustomerId String?
    resetToken String?
    favorites Favorite[]
    defaultGuest DefaultGuest?
    id String @id() @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt() @default(now())

    zenstack_guard Boolean @default(true)
    zenstack_transaction String?

    @@index([zenstack_transaction])
}

model DefaultGuest {
    name String?
    /// @email
    email String
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String @unique()
    id String @id() @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt() @default(now())

    zenstack_guard Boolean @default(true)
    zenstack_transaction String?

    @@index([zenstack_transaction])
}

model UserProfile {
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String @unique()
    avatar String?
    bio String?
    link String?
    id String @id() @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt() @default(now())

    zenstack_guard Boolean @default(true)
}

model Role {
    name String @unique()
    users User[]
    id String @id() @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt() @default(now())

    zenstack_guard Boolean @default(true)
}

model FreeDate {
    /// @length(10, 255)
    title String
    /// @length(100, 10000)
    description String
    /// @url
    thumbnail String
    stops DateStop[]
    plans PlannedDate[]
    recommendedTime String @default("6:30 PM")
    retired Boolean @default(false)
    views FreeDateViews?
    nsfw Boolean @default(false)
    tags Tag[]
    tastemaker Tastemaker @relation(fields: [tastemakerId], references: [id])
    tastemakerId String
    favorites Favorite[]
    id String @id() @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt() @default(now())

    zenstack_guard Boolean @default(true)
    zenstack_transaction String?

    @@index([zenstack_transaction])
    @@index([createdAt(sort: Asc)])
}

model Favorite {
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String
    freeDate FreeDate @relation(fields: [freeDateId], references: [id], onDelete: Cascade)
    freeDateId String

    zenstack_guard Boolean @default(true)

    @@id([userId, freeDateId])
}

model DateStop {
    /// @length(5, 500)
    title String
    /// @length(100, 10000)
    content String
    /// @gte(1)
    order Int
    freeDate FreeDate @relation(fields: [freeDateId], references: [id], onDelete: Cascade)
    freeDateId String
    location Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
    locationId String
    originTravel Travel? @relation("origin")
    destinationTravel Travel? @relation("destination")
    id String @id() @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt() @default(now())

    zenstack_guard Boolean @default(true)
    zenstack_transaction String?

    @@index([zenstack_transaction])
}

model Travel {
    origin DateStop @relation("origin", fields: [originId], references: [id], onDelete: Cascade)
    originId String @unique()
    destination DateStop @relation("destination", fields: [destinationId], references: [id], onDelete: Cascade)
    destinationId String @unique()
    mode TravelMode
    duration Duration?
    distance Distance?
    id String @id() @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt() @default(now())

    zenstack_guard Boolean @default(true)
}

model Distance {
    value Int
    travel Travel @relation(fields: [travelId], references: [id], onDelete: Cascade)
    travelId String @unique()
    id String @id() @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt() @default(now())

    zenstack_guard Boolean @default(true)
}

model Duration {
    value Int
    travel Travel @relation(fields: [travelId], references: [id], onDelete: Cascade)
    travelId String @unique()
    id String @id() @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt() @default(now())

    zenstack_guard Boolean @default(true)
}

model PlannedDate {
    freeDate FreeDate @relation(fields: [freeDateId], references: [id], onDelete: Cascade)
    freeDateId String
    user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String?
    email String?
    plannedTime DateTime
    guestEmail String?
    guestName String?
    id String @id() @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt() @default(now())

    zenstack_guard Boolean @default(true)
}

model FreeDateDraft {
    /// @length(10, 255)
    title String?
    /// @length(100, 10000)
    description String?
    /// @url
    thumbnail String?
    author User @relation(fields: [authorId], references: [id])
    authorId String
    stops DateStopDraft[]
    tags Tag[]
    nsfw Boolean @default(false)
    id String @id() @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt() @default(now())

    zenstack_guard Boolean @default(true)
    zenstack_transaction String?

    @@index([zenstack_transaction])
    @@index([createdAt(sort: Asc)])
}

model DateStopDraft {
    /// @length(5, 500)
    title String?
    /// @length(100, 10000)
    content String?
    /// @gte(1)
    order Int
    freeDate FreeDateDraft @relation(fields: [freeDateId], references: [id], onDelete: Cascade)
    freeDateId String
    location Location? @relation(fields: [locationId], references: [id], onDelete: Cascade)
    locationId String?
    id String @id() @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt() @default(now())

    zenstack_guard Boolean @default(true)
    zenstack_transaction String?

    @@index([zenstack_transaction])
}

model DateSuggestion {
    text String
    cities City[]
    id String @id() @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt() @default(now())

    zenstack_guard Boolean @default(true)
}

model FreeDateViews {
    views Int @default(0)
    freeDate FreeDate @relation(fields: [freeDateId], references: [id], onDelete: Cascade)
    freeDateId String @unique()
    lastViewedAt DateTime?
    id String @id() @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt() @default(now())

    zenstack_guard Boolean @default(true)
}

model Address {
    street String
    postalCode String
    city City @relation(fields: [cityId], references: [id], onDelete: Cascade)
    cityId String
    locations Location[]
    coordinates Coordinates?
    id String @id() @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt() @default(now())

    zenstack_guard Boolean @default(true)

    @@unique([street, postalCode, cityId])
}

model Coordinates {
    lat Float
    lng Float
    address Address @relation(fields: [addressId], references: [id], onDelete: Cascade)
    addressId String @unique()
    id String @id() @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt() @default(now())

    zenstack_guard Boolean @default(true)
}

model City {
    name String
    addresses Address[]
    state State @relation(fields: [stateId], references: [id], onDelete: Cascade)
    stateId String
    suggestions DateSuggestion[]
    customDates CustomDate[]
    tastemakerPreferences TastemakerPreference[]
    id String @id() @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt() @default(now())

    zenstack_guard Boolean @default(true)

    @@index([name(sort: Asc)])
}

model State {
    name String
    /// @length(2, 2)
    initials String
    cities City[]
    country Country @relation(fields: [countryId], references: [id], onDelete: Cascade)
    countryId String
    id String @id() @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt() @default(now())

    zenstack_guard Boolean @default(true)
    zenstack_transaction String?

    @@index([zenstack_transaction])
    @@index([initials(sort: Asc)])
}

model Country {
    name String
    /// @length(3, 3)
    initials String
    states State[]
    id String @id() @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt() @default(now())

    zenstack_guard Boolean @default(true)
    zenstack_transaction String?

    @@index([zenstack_transaction])
    @@index([initials(sort: Asc)])
}

model Location {
    name String
    /// @url
    website String?
    address Address @relation(fields: [addressId], references: [id], onDelete: Cascade)
    addressId String
    stops DateStop[]
    drafts DateStopDraft[]
    suggestionStops CustomDateSuggestionStop[]
    id String @id() @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt() @default(now())

    zenstack_guard Boolean @default(true)
    zenstack_transaction String?

    @@index([zenstack_transaction])
    @@index([createdAt(sort: Asc)])
    @@unique([name, addressId])
}

model CustomDate {
    cities City[]
    tastemaker Tastemaker @relation(fields: [tastemakerId], references: [id], onDelete: Cascade)
    tastemakerId String
    requestor User @relation(fields: [requestorId], references: [id], onDelete: Cascade)
    requestorId String
    beginsAt DateTime
    numStops Int
    cost Int
    priceRangeMin Int?
    priceRangeMax Int?
    status CustomDateStatus @relation(fields: [statusId], references: [id], onDelete: Cascade)
    statusId String
    notes String?
    respondedAt DateTime?
    tags Tag[]
    suggestions CustomDateSuggestion[]
    messages CustomDateMessage[]
    lastMessageSentAt DateTime?
    refund CustomDateRefund?
    completed Boolean @default(false)
    id String @id() @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt() @default(now())

    zenstack_guard Boolean @default(true)
}

model CustomDateStatus {
    name String @unique()
    date CustomDate[]
    id String @id() @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt() @default(now())

    zenstack_guard Boolean @default(true)
}

model CustomDateRefund {
    status CustomDateRefundStatus @relation(fields: [statusId], references: [id], onDelete: Cascade)
    statusId String
    reason String
    customDate CustomDate @relation(fields: [customDateId], references: [id], onDelete: Cascade)
    customDateId String @unique()
    id String @id() @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt() @default(now())

    zenstack_guard Boolean @default(true)
}

model CustomDateRefundStatus {
    name String @unique()
    refunds CustomDateRefund[]
    id String @id() @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt() @default(now())

    zenstack_guard Boolean @default(true)
}

model CustomDateSuggestion {
    customDate CustomDate @relation(fields: [customDateId], references: [id], onDelete: Cascade)
    customDateId String
    revisionNumber Int
    status CustomDateSuggestionStatus @relation(fields: [statusId], references: [id], onDelete: Cascade)
    statusId String
    stops CustomDateSuggestionStop[]
    id String @id() @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt() @default(now())

    zenstack_guard Boolean @default(true)
}

model CustomDateSuggestionStatus {
    name String @unique()
    suggestions CustomDateSuggestion[]
    id String @id() @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt() @default(now())

    zenstack_guard Boolean @default(true)
}

model CustomDateSuggestionStop {
    order Int
    content String
    location Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
    locationId String
    suggestion CustomDateSuggestion @relation(fields: [suggestionId], references: [id], onDelete: Cascade)
    suggestionId String
    change CustomDateSuggestionStopRequestedChange?
    id String @id() @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt() @default(now())

    zenstack_guard Boolean @default(true)
}

model CustomDateSuggestionStopRequestedChange {
    stop CustomDateSuggestionStop @relation(fields: [stopId], references: [id], onDelete: Cascade)
    stopId String @unique()
    comment String
    id String @id() @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt() @default(now())

    zenstack_guard Boolean @default(true)
}

model CustomDateMessage {
    customDate CustomDate @relation(fields: [customDateId], references: [id])
    customDateId String
    sender User @relation(fields: [senderId], references: [id])
    senderId String
    text String
    id String @id() @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt() @default(now())

    zenstack_guard Boolean @default(true)
}

model Tastemaker {
    price Int @default(0)
    isPartiallySetup Boolean @default(false)
    isSetup Boolean @default(false)
    specializesIn TastemakerPreference? @relation("SpecializesIn")
    doesNotDo TastemakerPreference? @relation("DoesNotDo")
    minNumStops Int @default(1)
    maxNumStops Int?
    customDates CustomDate[]
    user User @relation(fields: [userId], references: [id])
    userId String @unique()
    freeDates FreeDate[]
    id String @id() @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt() @default(now())

    zenstack_guard Boolean @default(true)
}

model TastemakerPreference {
    cities City[]
    tags Tag[]
    specializesIn Tastemaker? @relation("SpecializesIn", fields: [specializesInId], references: [id], onDelete: Cascade)
    specializesInId String? @unique()
    doesNotDo Tastemaker? @relation("DoesNotDo", fields: [doesNotDoId], references: [id], onDelete: Cascade)
    doesNotDoId String? @unique()
    id String @id() @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt() @default(now())

    zenstack_guard Boolean @default(true)
}

model Tag {
    name String @unique()
    freeDates FreeDate[]
    drafts FreeDateDraft[]
    customDates CustomDate[]
    tastemakerPreferences TastemakerPreference[]
    id String @id() @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt() @default(now())

    zenstack_guard Boolean @default(true)
}