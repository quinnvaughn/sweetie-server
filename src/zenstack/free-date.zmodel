import "base"

model FreeDate extends Base {
    title String @length(10, 255)
    description String @length(100, 10000)
    thumbnail String @url
    orderedStops OrderedDateStop[]
    variations FreeDateVariation[]
    // this is the recommended time you go on the date (e.g. 6:30 PM)
    // the tastemaker can set this
    recommendedTime String @default("6:00 PM")
    // soft delete
    archived Boolean @default(false)
    prep String[]
    views FreeDateViews?
    nsfw Boolean @default(false)
	tags Tag[]
    tastemaker Tastemaker @relation(fields: [tastemakerId], references: [id], onDelete: Cascade)
    tastemakerId String
    favorites Favorite[]
    lists CategorizedDateList[]
    @@index([createdAt(sort: Asc)])
}

model Favorite {
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String
    freeDate FreeDate @relation(fields: [freeDateId], references: [id], onDelete: Cascade)
    freeDateId String
    @@id([userId, freeDateId])
}

model OrderedDateStop extends Base {
    order Int @default(1)
    // we set the optional on the ordered parent so it applies to all children
    optional Boolean @default(false)
    options DateStopOption[]
    // estimated time spent at this stop in minutes
    estimatedTime Int @default(60)
	freeDate FreeDate @relation(fields: [freeDateId], references: [id], onDelete: Cascade)
	freeDateId String
}

model DateStopOption extends Base {
    title String @length(5, 500)
    content String @length(100, 10000)
    // if there are multiple options for the same stop, we can use this to order them
    optionOrder Int @default(1)
	orderedDateStop OrderedDateStop @relation(fields: [orderedDateStopId], references: [id], onDelete: Cascade)
	orderedDateStopId String

	freeDateVariations FreeDateVariation[]
    location Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
    locationId String
}

model Travel extends Base {
    origin Location @relation("origin", fields: [originId], references: [id], onDelete: Cascade)
    originId String
    destination Location @relation("destination", fields: [destinationId], references: [id], onDelete: Cascade)
    destinationId String
    mode TravelMode
    duration Duration?
    distance Distance?

    @@unique([originId, destinationId])
}

model Distance extends Base {
    // in meters
    value Int
    travel Travel @relation(fields: [travelId], references: [id], onDelete: Cascade)
    travelId String @unique
}

model Duration extends Base {
    // in seconds
    value Int
    travel Travel @relation(fields: [travelId], references: [id], onDelete: Cascade)
    travelId String @unique
}

enum TravelMode {
    CAR
    TRAIN
    PLANE
    BOAT
    WALK
}


model PlannedDate extends Base {
    // if the user is logged in, we can use the user id
    user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String?
    // if the user is not logged in, we can use the email
    email String?
    plannedTime DateTime
    // add guest info 
    guestEmail String?
    guestName String?
    freeDateVariation FreeDateVariation? @relation(fields: [freeDateVariationId], references: [id], onDelete: Cascade)
    freeDateVariationId String?
}

model FreeDateVariation extends Base {
    freeDate FreeDate @relation(fields: [freeDateId], references: [id], onDelete: Cascade)
    freeDateId String
    // this is an array as opposed to a one to one because we can reuse the same variation for multiple planned dates
    plannedDates PlannedDate[]
    dateStopOptions DateStopOption[]
}

model DateSuggestion extends Base {
    text String 
    cities City[]
}

model FreeDateViews extends Base {
    views Int @default(0)
    freeDate FreeDate @relation(fields: [freeDateId], references: [id], onDelete: Cascade)
    freeDateId String @unique
    lastViewedAt DateTime?
}

model CategorizedDateList extends Base {
    title String @unique
    description String?
    order Int @default(0)
    dates FreeDate[]
}

model SpecialOffer extends Base {
    title String @unique
    description String
    color String
    // 'heart' etc 
    icon String 
}