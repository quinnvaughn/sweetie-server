import 'base'

model Event extends Base {
  title String 
  description String
  image String 
  numSpots Int // number of spots available
  minimumPrice Int // in cents
  maximumPrice Int // in cents
  stops EventOrderedStop[]
  products EventProduct[]
  addOns EventAddOn[]
  waitlist EventWaitlist?
  tastemaker Tastemaker @relation(fields: [tastemakerId], references: [id], onDelete: Cascade)
  tastemakerId String
}

model EventOrderedStop extends Base {
  order Int
  description String
  estimatedTime Int @default(60) // in minutes
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId String
  location Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
  locationId String
}

model EventProduct extends Base {
  order Int
  name String
  description String
  image String
  // the price is just factored into the event's price
  // we don't want to show individual prices for products
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId String
}

model EventWaitlist extends Base {
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId String @unique 
  groups EventWaitlistGroup[]
}

model EventWaitlistGroup extends Base {
  position Int
  code String
  eventWaitlist EventWaitlist @relation(fields: [eventWaitlistId], references: [id], onDelete: Cascade)
  eventWaitlistId String
  users User[]
  @@unique([code, eventWaitlistId])
}

model EventAddOn extends Base {
  order Int
  name String
  description String
  image String?
  minimumPrice Int // in cents
  maximumPrice Int // in cents
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId String
}