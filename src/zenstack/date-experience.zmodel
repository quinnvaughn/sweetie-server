import "base"

model FreeDate extends Base {
    title String @length(10, 255)
    description String @length(100, 10000)
    thumbnail String @url
    stops DateStop[]
    plans PlannedDate[]
    // soft delete
    retired Boolean @default(false)
    timesOfDay TimeOfDay[]
    views FreeDateViews?
    nsfw Boolean @default(false)
    featured Boolean @default(false)
    // This way we can remove the oldest featured date experience if we have 
    // 4 and want to add another one.
    featuredAt DateTime?
	tags Tag[]
    tastemaker Tastemaker @relation(fields: [tastemakerId], references: [id])
    tastemakerId String

    @@index([createdAt(sort: Asc)])
}


model DateStop extends Base {
    title String @length(5, 500)
    content String @length(100, 10000)
    order Int @gte(1)
    freeDate FreeDate @relation(fields: [freeDateId], references: [id], onDelete: Cascade)
    freeDateId String
    location Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
    locationId String
}


model PlannedDate extends Base {
    freeDate FreeDate @relation(fields: [freeDateId], references: [id], onDelete: Cascade)
    freeDateId String
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String
    plannedTime DateTime
}

model TimeOfDay extends Base {
    name String @unique
	freeDates FreeDate[]
    drafts FreeDateDraft[]
}


// drafts
model FreeDateDraft extends Base {
    title String? @length(10, 255)
    description String? @length(100, 10000)
    thumbnail String? @url
    author User @relation(fields: [authorId], references: [id])
    authorId String
    stops DateStopDraft[]
    timesOfDay TimeOfDay[]
    tags Tag[]
    nsfw Boolean @default(false)

    @@index([createdAt(sort: Asc)])
}

model DateStopDraft extends Base {
    title String? @length(5, 500)
    content String? @length(100, 10000)
    order Int @gte(1)
    freeDate FreeDateDraft @relation(fields: [freeDateId], references: [id], onDelete: Cascade)
    freeDateId String
    location Location? @relation(fields: [locationId], references: [id], onDelete: Cascade)
    locationId String?
}

model DateSuggestion extends Base {
    text String 
    cities City[]
}

model FreeDateViews extends Base {
    views Int @default(0)
    freeDate FreeDate @relation(fields: [freeDateId], references: [id], onDelete: Cascade)
    freeDateId String @unique
    lastViewedAt DateTime?
}